// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppArmadillo.h>
#include <Rcpp.h>

using namespace Rcpp;

// get_interims
arma::mat get_interims(Rcpp::List& cfg);
RcppExport SEXP _OrvacRCT_get_interims(SEXP cfgSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::List& >::type cfg(cfgSEXP);
    rcpp_result_gen = Rcpp::wrap(get_interims(cfg));
    return rcpp_result_gen;
END_RCPP
}
// test_set_state
Rcpp::List test_set_state(Rcpp::List& cfg, bool dofu, int cur_intrm_idx, int n_target, double ref_time);
RcppExport SEXP _OrvacRCT_test_set_state(SEXP cfgSEXP, SEXP dofuSEXP, SEXP cur_intrm_idxSEXP, SEXP n_targetSEXP, SEXP ref_timeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::List& >::type cfg(cfgSEXP);
    Rcpp::traits::input_parameter< bool >::type dofu(dofuSEXP);
    Rcpp::traits::input_parameter< int >::type cur_intrm_idx(cur_intrm_idxSEXP);
    Rcpp::traits::input_parameter< int >::type n_target(n_targetSEXP);
    Rcpp::traits::input_parameter< double >::type ref_time(ref_timeSEXP);
    rcpp_result_gen = Rcpp::wrap(test_set_state(cfg, dofu, cur_intrm_idx, n_target, ref_time));
    return rcpp_result_gen;
END_RCPP
}
// test_rbinom_r
arma::vec test_rbinom_r(int n, double p);
RcppExport SEXP _OrvacRCT_test_rbinom_r(SEXP nSEXP, SEXP pSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    Rcpp::traits::input_parameter< double >::type p(pSEXP);
    rcpp_result_gen = Rcpp::wrap(test_rbinom_r(n, p));
    return rcpp_result_gen;
END_RCPP
}
// test_armabinom
arma::vec test_armabinom(int n, double p);
RcppExport SEXP _OrvacRCT_test_armabinom(SEXP nSEXP, SEXP pSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    Rcpp::traits::input_parameter< double >::type p(pSEXP);
    rcpp_result_gen = Rcpp::wrap(test_armabinom(n, p));
    return rcpp_result_gen;
END_RCPP
}
// simulate_trial
Rcpp::List simulate_trial(int idxsim, Rcpp::List& cfg, bool rtn_trial_dat);
RcppExport SEXP _OrvacRCT_simulate_trial(SEXP idxsimSEXP, SEXP cfgSEXP, SEXP rtn_trial_datSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type idxsim(idxsimSEXP);
    Rcpp::traits::input_parameter< Rcpp::List& >::type cfg(cfgSEXP);
    Rcpp::traits::input_parameter< bool >::type rtn_trial_dat(rtn_trial_datSEXP);
    rcpp_result_gen = Rcpp::wrap(simulate_trial(idxsim, cfg, rtn_trial_dat));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_OrvacRCT_get_interims", (DL_FUNC) &_OrvacRCT_get_interims, 1},
    {"_OrvacRCT_test_set_state", (DL_FUNC) &_OrvacRCT_test_set_state, 5},
    {"_OrvacRCT_test_rbinom_r", (DL_FUNC) &_OrvacRCT_test_rbinom_r, 2},
    {"_OrvacRCT_test_armabinom", (DL_FUNC) &_OrvacRCT_test_armabinom, 2},
    {"_OrvacRCT_simulate_trial", (DL_FUNC) &_OrvacRCT_simulate_trial, 3},
    {NULL, NULL, 0}
};

RcppExport void R_init_OrvacRCT(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
